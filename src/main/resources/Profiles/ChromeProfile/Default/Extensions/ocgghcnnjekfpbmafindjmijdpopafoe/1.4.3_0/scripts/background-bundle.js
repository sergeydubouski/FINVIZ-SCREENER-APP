!function(){"use strict";Object.assign;function e(e,t,s,i){return new(s||(s=Promise))(function(n,o){function r(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){e.done?n(e.value):new s(function(t){t(e.value)}).then(r,a)}c((i=i.apply(e,t)).next())})}class t{static log(...e){window.__env}}function s(e,t){const s=e[t].bind(e);return(...e)=>new Promise(t=>s(...e,e=>t(e)))}class i{constructor(e){e&&(this.queryTabs=e.tabs&&s(e.tabs,"query"),this.sendMessageToTabRaw=e.tabs&&s(e.tabs,"sendMessage"),this.sendMessageToBackgroundRaw=e.runtime&&s(e.runtime,"sendMessage"),this.getFromLocalStore=e.storage&&s(e.storage.local,"get"))}sendMessageToBackground(s){return e(this,void 0,void 0,function*(){if(!this.sendMessageToBackgroundRaw)throw new Error("sendMessageToBackground is not available in this context");return t.log("[cau] send message to background",s),yield this.sendMessageToBackgroundRaw(s)})}sendMessageToTab(s,i){return e(this,void 0,void 0,function*(){if(!this.sendMessageToTabRaw)throw new Error("sendMessageToTab is not available in this context");return t.log("[cau] send message to tab",s,i),yield this.sendMessageToTabRaw(s,i)})}getCurrentTab(){return e(this,void 0,void 0,function*(){if(!this.queryTabs)throw new Error("getCurrentTab is not available in this context");const e=yield this.queryTabs({active:!0,currentWindow:!0});if(e&&1===e.length&&e[0]&&e[0].id)return e[0].id;throw new Error(`failed to identify current tab, got: ${e}`)})}getMainConfig(){return e(this,void 0,void 0,function*(){if(!this.getFromLocalStore)throw new Error("getMainConfig is not available in this context");const e=yield this.getFromLocalStore();return e&&(e.mainConfig||{})})}}class n{copy(e,t){document.oncopy=(s=>{s.clipboardData.setData(t,e),s.preventDefault()}),document.execCommand("Copy",!1,null)}}if(!window.chrome){console.error("background script requires Chrome API!");const e=()=>{},t={addListener:e,removeListener:e};window.chrome={contextMenus:{onClicked:t},runtime:{onConnect:t,onInstalled:t,sendMessage:e},tabs:{onRemoved:t,onReplaced:t,onActivated:t,query:e,sendMessage:e}}}const o=new class{constructor(e){this.tabPorts={},this.disconnectSubscribers=[],t.log("[mh] init message-hub"),e.runtime.onConnect.addListener(e=>{let s;t.log("[mh] got new connection...");const i=i=>{s||(t.log("[mh] registered tab connection",i),s=i.tabId,this.tabPorts[s]=e)},n=s=>{t.log("[mh] init mapping"),i(s),e.onMessage.removeListener(n)};e.onMessage.addListener(n),e.onDisconnect.addListener(()=>{s&&(t.log("[mh] disconnect",s),this.disconnectSubscribers.forEach(e=>e(s)),delete this.tabPorts[s])})}),e.tabs.onRemoved.addListener(e=>{delete this.tabPorts[e]}),e.tabs.onReplaced.addListener((e,t)=>{delete this.tabPorts[t]})}getPort(e){return this.tabPorts[e]}onDevToolsDisconnect(e){this.disconnectSubscribers.push(e)}sendToTab(e,t){const s=this.getPort(e);s&&s.postMessage(t)}}(window.chrome),r=new class{constructor(t,s,o=new n){if(this.chromeApi=t,this.messageHub=s,this.clipboard=o,this.connectedToWebtestit=!1,this.onContextMenuClicked=(t=>e(this,void 0,void 0,function*(){if(t.menuItemId.startsWith("rxse-selector-send-")){const e=t.menuItemId.slice("rxse-selector-send-".length),{selector:s,tabId:i}=yield this.buildSelector(e);this.sendNewSelector(i,s,e)}else if(t.menuItemId.startsWith("rxse-selector-copy-")){const e=t.menuItemId.slice("rxse-selector-copy-".length);this.buildAndCopySelector(e)}else"rxse-connect-to-webtestit"===t.menuItemId&&chrome.windows.create({focused:!0,height:950,type:"popup",url:chrome.runtime.getURL("popup/popup-webtestit-instructions.html"),width:550})})),!s||!s.getPort)throw new Error("invalid_arg: messageHub");this.chromeApiUtils=new i(t),this.chromeApi.runtime.onInstalled.addListener(()=>this.installContextMenus()),this.chromeApi.contextMenus.onClicked.addListener(e=>this.onContextMenuClicked(e))}static waitFor(e){return new Promise(t=>setTimeout(t,e))}isConnected(){return this.connectedToWebtestit}installContextMenus(i){return e(this,void 0,void 0,function*(){const n=s(this.chromeApi.contextMenus,"removeAll"),o=s(this.chromeApi.contextMenus,"create");!i&&this.availableSelectorStrategies||i&&this.availableSelectorStrategies&&this.availableSelectorStrategies.length===i.length&&this.availableSelectorStrategies.every((e,t)=>i[t]===e)||(t.log("[cm] install menus:",i||"<all>"),yield n(),yield o({contexts:["all"],documentUrlPatterns:["http://*/*","https://*/*","file:///*/*"],enabled:!!i&&!!i.length,id:"rxse-all",title:"Selector actions"}),this.availableSelectorStrategies=[],i&&i.length&&(yield o({contexts:["all"],id:"rxse-connect-to-webtestit",parentId:"rxse-all",title:"Connect to Ranorex Webtestit",visible:!0}),yield o({contexts:["all"],id:"sep-rxse-connect-to-webtestit",parentId:"rxse-all",title:"sep",type:"separator",visible:!0}),yield Promise.all(i.filter(e=>"rxpath"!==e).map(t=>e(this,void 0,void 0,function*(){yield o({contexts:["all"],enabled:!1,id:`rxse-selector-send-${t}`,parentId:"rxse-all",title:"Send "+t,visible:!0})}))),yield o({contexts:["all"],id:"sep-item",parentId:"rxse-all",type:"separator",visible:!0}),yield Promise.all(i.map(t=>e(this,void 0,void 0,function*(){return yield o({contexts:["all"],id:`rxse-selector-copy-${t}`,parentId:"rxse-all",title:"Copy "+t,visible:!0})}))),this.availableSelectorStrategies=i))})}toggleAppLinks(i){return e(this,void 0,void 0,function*(){const n=s(this.chromeApi.contextMenus,"update");if(!this.availableSelectorStrategies||!this.availableSelectorStrategies.length)return;t.log("[cm] updating menu items visibility:",this.availableSelectorStrategies||"<all>");const o="connected"===i.request;this.connectedToWebtestit=o,yield n("rxse-connect-to-webtestit",{visible:!o}),yield n("sep-rxse-connect-to-webtestit",{type:o?"normal":"separator",visible:!o}),yield Promise.all(this.availableSelectorStrategies.filter(e=>"rxpath"!==e).map(t=>e(this,void 0,void 0,function*(){yield n(`rxse-selector-send-${t}`,{enabled:o})})))})}updateContextMenu(e,t){return s(this.chromeApi.contextMenus,"update")(e,t)}updateMouseTargetOrigin(e){this.mouseTargetOrigin=e}buildAndCopySelector(t){return e(this,void 0,void 0,function*(){const{config:e,tabId:s,selector:i}=yield this.buildSelector(t),n=!e||e.copyWithQuotes?JSON.stringify(i.selector):i.selector;this.clipboard.copy(n,"text/plain"),this.postNewSelector(s,i)})}buildSelector(s){return e(this,void 0,void 0,function*(){const e=yield this.chromeApiUtils.getMainConfig(),{tabId:i,selector:n}=yield this.requestSelectorForMostRecentlyClickedElement("auto"!==s?s:void 0,!e||e.ignoreDynamicIds);return t.log("[cm] received new selector from active tab",i,n),{config:e,tabId:i,selector:n}})}requestSelectorForMostRecentlyClickedElement(t,s=!0){return e(this,void 0,void 0,function*(){const e=yield this.chromeApiUtils.getCurrentTab();return{tabId:e,selector:yield this.requestSelector(e,t,s)}})}requestSelector(e,t,s=!0){return new Promise((i,n)=>{const o=setTimeout(()=>{this.chromeApi.runtime.onMessage.removeListener(r),n(new Error("time-out: failed to get SelectorBuildResult in 200 ms"))},200),r=e=>{"provide-happy-result"===e.msg&&(clearTimeout(o),this.chromeApi.runtime.onMessage.removeListener(r),e.matchingElements&&e.selector?i(e):n(new Error(`type error: expected SelectorBuildResult, got ${JSON.stringify(e)}`)))};this.chromeApi.runtime.onMessage.addListener(r),this.chromeApiUtils.sendMessageToTab(e,{forcedSelectorType:t,ignoreDynamicIds:s,msg:"build-selector",receiverId:this.mouseTargetOrigin}).catch(n)})}postNewSelector(e,t){this.messageHub.sendToTab(e,{msg:"update-user-selector",selector:t})}sendNewSelector(e,t,s){this.messageHub.sendToTab(e,{msg:"send-selector-to-app",selector:t,strategy:s})}}(window.chrome,o),a=new class{constructor(e){this.chromeApi=e,this.registeredHandlers=[]}listenToBackgroundRequests(e,s){if(t.log("[bh] register bg request listener",e),!this.chromeApi||!this.chromeApi.runtime||!this.chromeApi.runtime.onMessage)return;const i=(i,n,o)=>{if(i.msg===e){t.log("[bh] received known message in content script",i);const e=s(i);if(e&&"function"==typeof e.then)return e.then(o),!0;o(e)}else t.log("[bh] received unknown message in content script",i)};this.chromeApi.runtime.onMessage.addListener(i),this.registeredHandlers.push(i)}removeAllListeners(){this.registeredHandlers.forEach(e=>this.chromeApi.runtime.onMessage.removeListener(e))}}(window.chrome),c=new i(window.chrome);let l;a.listenToBackgroundRequests("init-content-script",e=>r.installContextMenus(e.selectorTypes)),a.listenToBackgroundRequests("connection-state-changed",e=>r.toggleAppLinks(e)),a.listenToBackgroundRequests("mouse-target-update",e=>{c.getCurrentTab().then(t=>o.sendToTab(t,{frameURL:e.elementInfo.frameURL,msg:"mouse-target-update"}),()=>void 0),r.updateMouseTargetOrigin(e.elementInfo.callerId),r.updateContextMenu("rxse-selector-copy-link-text",{enabled:e.elementInfo.isLink}),r.updateContextMenu("rxse-selector-send-link-text",{enabled:e.elementInfo.isLink&&r.isConnected()})}),window.chrome.runtime.onInstalled.addListener(()=>{window.chrome.tabs.query({},e=>{e.forEach(e=>{chrome.tabs.executeScript(e.id,{file:"scripts/inject-bundle.js",allFrames:!0},s=>{t.log("[bg] Injected",s?s.length:0,"times for tab",e.id)})})})}),window.chrome.tabs.onActivated.addListener(e=>{l=e.tabId;const t=o.getPort(e.tabId);t?t.postMessage({msg:"tab-activated"}):r.toggleAppLinks({})}),o.onDevToolsDisconnect(e=>{chrome.tabs.sendMessage(e,{msg:"devtools-disconnected"}),e===l&&r.toggleAppLinks({})})}();